//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//


//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s): 
//
// State Map
//	This state map is recognizes the regular expression 0*1*.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.5  2005/05/28 13:31:16  cwrapp
// Updated C++ examples.
//
// Revision 1.1  2005/02/21 14:19:18  charlesr
// Added spaces around header file name to test SMC.
//
// Revision 1.0  2003/12/14 19:11:57  charlesr
// Initial revision
//


#include "AppClass.h"
#include "C:\smc-git-code-b058839dba1b0c62de2a6ea5f31c54d57f075381-20210913T092731Z-001\smc-git-code-b058839dba1b0c62de2a6ea5f31c54d57f075381\examples\C++\Lab1_smc\AppClass_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_TEL_FAX Map1::TEL_FAX("Map1::TEL_FAX", 1);
Map1_SMS Map1::SMS("Map1::SMS", 2);
Map1_NUMBER Map1::NUMBER("Map1::NUMBER", 3);
Map1_DIGIT Map1::DIGIT("Map1::DIGIT", 4);
Map1_PLUS Map1::PLUS("Map1::PLUS", 5);
Map1_MESSAGE Map1::MESSAGE("Map1::MESSAGE", 6);
Map1_CORRECT Map1::CORRECT("Map1::CORRECT", 7);

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::cormes(AppClassContext& context)
{
    Default(context);
}

void AppClassState::digit(AppClassContext& context)
{
    Default(context);
}

void AppClassState::message(AppClassContext& context)
{
    Default(context);
}

void AppClassState::number(AppClassContext& context)
{
    Default(context);
}

void AppClassState::plus(AppClassContext& context)
{
    Default(context);
}

void AppClassState::sms(AppClassContext& context)
{
    Default(context);
}

void AppClassState::tel_fax(AppClassContext& context)
{
    Default(context);
}

void AppClassState::wrong_begin(AppClassContext& context)
{
    Default(context);
}

void AppClassState::wrong_message(AppClassContext& context)
{
    Default(context);
}

void AppClassState::wrong_number(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Start::sms(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::sms()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.isSMS();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Start::sms()"
                << std::endl;
        }

        context.setState(Map1::SMS);
    }
    catch (...)
    {
        context.setState(Map1::SMS);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::tel_fax(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::tel_fax()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.notSMS();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Start::tel_fax()"
                << std::endl;
        }

        context.setState(Map1::TEL_FAX);
    }
    catch (...)
    {
        context.setState(Map1::TEL_FAX);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::wrong_begin(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::wrong_begin()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Start::wrong_begin()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_TEL_FAX::number(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::TEL_FAX"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::TEL_FAX::number()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::TEL_FAX::number()"
            << std::endl;
    }

    context.setState(Map1::NUMBER);
    context.getState().Entry(context);

}

void Map1_TEL_FAX::wrong_number(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::TEL_FAX"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::TEL_FAX::wrong_number()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::TEL_FAX::wrong_number()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_SMS::number(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::SMS::number()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::SMS::number()"
            << std::endl;
    }

    context.setState(Map1::NUMBER);
    context.getState().Entry(context);

}

void Map1_SMS::wrong_number(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::SMS::wrong_number()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::SMS::wrong_number()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_NUMBER::plus(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::NUMBER"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::NUMBER::plus()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.kIsNull();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::NUMBER::plus()"
                << std::endl;
        }

        context.setState(Map1::PLUS);
    }
    catch (...)
    {
        context.setState(Map1::PLUS);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_NUMBER::wrong_number(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::NUMBER"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::NUMBER::wrong_number()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::NUMBER::wrong_number()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_DIGIT::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::DIGIT"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::DIGIT::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::DIGIT::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_DIGIT::digit(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::DIGIT"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::DIGIT::digit()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.kPlusOne();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::DIGIT::digit()"
                << std::endl;
        }

        context.setState(Map1::DIGIT);
    }
    catch (...)
    {
        context.setState(Map1::DIGIT);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_DIGIT::message(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::DIGIT"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::DIGIT::message()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.isCorrectNumber();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::DIGIT::message()"
                << std::endl;
        }

        context.setState(Map1::MESSAGE);
    }
    catch (...)
    {
        context.setState(Map1::MESSAGE);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_DIGIT::number(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::DIGIT"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::DIGIT::number()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.isCorrectNumber();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::DIGIT::number()"
                << std::endl;
        }

        context.setState(Map1::NUMBER);
    }
    catch (...)
    {
        context.setState(Map1::NUMBER);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_DIGIT::wrong_number(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::DIGIT"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::DIGIT::wrong_number()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::DIGIT::wrong_number()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_PLUS::digit(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::PLUS"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::PLUS::digit()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.kPlusOne();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::PLUS::digit()"
                << std::endl;
        }

        context.setState(Map1::DIGIT);
    }
    catch (...)
    {
        context.setState(Map1::DIGIT);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_PLUS::message(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::PLUS"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::PLUS::message()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::PLUS::message()"
            << std::endl;
    }

    context.setState(Map1::MESSAGE);
    context.getState().Entry(context);

}

void Map1_PLUS::wrong_number(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::PLUS"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::PLUS::wrong_number()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::PLUS::wrong_number()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_MESSAGE::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MESSAGE::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::MESSAGE::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_MESSAGE::cormes(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MESSAGE::cormes()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.isCorrectMess();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::MESSAGE::cormes()"
                << std::endl;
        }

        context.setState(Map1::CORRECT);
    }
    catch (...)
    {
        context.setState(Map1::CORRECT);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_MESSAGE::digit(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MESSAGE::digit()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::MESSAGE::digit()"
            << std::endl;
    }

    context.setState(Map1::MESSAGE);
    context.getState().Entry(context);

}

void Map1_MESSAGE::message(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MESSAGE::message()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.mPlusOne();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::MESSAGE::message()"
                << std::endl;
        }

        context.setState(Map1::MESSAGE);
    }
    catch (...)
    {
        context.setState(Map1::MESSAGE);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_MESSAGE::number(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MESSAGE::number()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::MESSAGE::number()"
            << std::endl;
    }

    context.setState(Map1::MESSAGE);
    context.getState().Entry(context);

}

void Map1_MESSAGE::plus(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MESSAGE::plus()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::MESSAGE::plus()"
            << std::endl;
    }

    context.setState(Map1::MESSAGE);
    context.getState().Entry(context);

}

void Map1_MESSAGE::wrong_message(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MESSAGE::wrong_message()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::MESSAGE::wrong_message()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_CORRECT::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::CORRECT"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::CORRECT::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::CORRECT::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_CORRECT::cormes(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::CORRECT"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::CORRECT::cormes()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::CORRECT::cormes()"
            << std::endl;
    }

    context.setState(Map1::CORRECT);
    context.getState().Entry(context);

}

void Map1_CORRECT::wrong_message(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::CORRECT"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::CORRECT::wrong_message()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::CORRECT::wrong_message()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
