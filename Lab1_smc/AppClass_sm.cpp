//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//


//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s): 
//
// State Map
//	This state map is recognizes the regular expression 0*1*.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.5  2005/05/28 13:31:16  cwrapp
// Updated C++ examples.
//
// Revision 1.1  2005/02/21 14:19:18  charlesr
// Added spaces around header file name to test SMC.
//
// Revision 1.0  2003/12/14 19:11:57  charlesr
// Initial revision
//


#include "AppClass.h"
#include "C:\smc-git-code-b058839dba1b0c62de2a6ea5f31c54d57f075381-20210913T092731Z-001\smc-git-code-b058839dba1b0c62de2a6ea5f31c54d57f075381\examples\C++\Lab1_smc\AppClass_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_NUMBER Map1::NUMBER("Map1::NUMBER", 1);
Map1_PLUS Map1::PLUS("Map1::PLUS", 2);
Map1_DIGIT Map1::DIGIT("Map1::DIGIT", 3);
Map1_MESSAGE Map1::MESSAGE("Map1::MESSAGE", 4);
Map1_SMS_MESSAGE Map1::SMS_MESSAGE("Map1::SMS_MESSAGE", 5);
Map1_SMS_MESSAGE_b Map1::SMS_MESSAGE_b("Map1::SMS_MESSAGE_b", 6);
Map1_SMS_MESSAGE_o Map1::SMS_MESSAGE_o("Map1::SMS_MESSAGE_o", 7);
Map1_SMS_MESSAGE_d Map1::SMS_MESSAGE_d("Map1::SMS_MESSAGE_d", 8);
Map1_SMS_MESSAGE_y Map1::SMS_MESSAGE_y("Map1::SMS_MESSAGE_y", 9);
Map1_SMS_TEXT Map1::SMS_TEXT("Map1::SMS_TEXT", 10);

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::digit(AppClassContext& context, char symbol)
{
    Default(context);
}

void AppClassState::next_state(AppClassContext& context, std::string str)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Start::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.startAuto();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Start::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::next_state(AppClassContext& context, std::string str)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    if (ctxt.prefixFaxTel(str) == true)
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Start::next_state(std::string str)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.notSMS();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Start::next_state(std::string str)"
                    << std::endl;
            }

            context.setState(Map1::NUMBER);
        }
        catch (...)
        {
            context.setState(Map1::NUMBER);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.prefixSMS(str) == true)

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Start::next_state(std::string str)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.isSMS();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Start::next_state(std::string str)"
                    << std::endl;
            }

            context.setState(Map1::NUMBER);
        }
        catch (...)
        {
            context.setState(Map1::NUMBER);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.prefixSMS(str) == false && ctxt.prefixFaxTel(str) == false)

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Start::next_state(std::string str)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Start::next_state(std::string str)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::next_state(context, str);
    }

}

void Map1_NUMBER::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::NUMBER"
                << std::endl;
    }

    if (symbol != '+' && symbol != ';')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::NUMBER::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::NUMBER::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (symbol == '+')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::NUMBER::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addChar(symbol);
            ctxt.kIsNull();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::NUMBER::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::PLUS);
        }
        catch (...)
        {
            context.setState(Map1::PLUS);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (symbol == ';')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::NUMBER::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addNumber();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::NUMBER::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::NUMBER);
        }
        catch (...)
        {
            context.setState(Map1::NUMBER);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_PLUS::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::PLUS"
                << std::endl;
    }

    if (symbol >= '0' && symbol <= '9')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::PLUS::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addChar(symbol);
            ctxt.kPlusOne();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::PLUS::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::DIGIT);
        }
        catch (...)
        {
            context.setState(Map1::DIGIT);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (symbol < '0' || symbol > '9')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::PLUS::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::PLUS::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_DIGIT::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::DIGIT"
                << std::endl;
    }

    if (symbol >= '0' && symbol <= '9')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::DIGIT::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addChar(symbol);
            ctxt.kPlusOne();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::DIGIT::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::DIGIT);
        }
        catch (...)
        {
            context.setState(Map1::DIGIT);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (symbol == ',' && ctxt.isCorrectNumber() == true)

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::DIGIT::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addNumber();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::DIGIT::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::NUMBER);
        }
        catch (...)
        {
            context.setState(Map1::NUMBER);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (symbol == ';' && ctxt.isCorrectNumber() == true)

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::DIGIT::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addNumber();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::DIGIT::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::MESSAGE);
        }
        catch (...)
        {
            context.setState(Map1::MESSAGE);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (((symbol == ';' || symbol == ',') && ctxt.isCorrectNumber() == false)
				|| ((symbol < '0' && symbol != ',') || (symbol > '9' && symbol != ';')))

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::DIGIT::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::DIGIT::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_MESSAGE::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MESSAGE::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        ctxt.startAuto();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::MESSAGE::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_MESSAGE::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MESSAGE"
                << std::endl;
    }

    if (symbol == '?' && ctxt.sms == true)
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::MESSAGE::digit(char symbol)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::MESSAGE::digit(char symbol)"
                << std::endl;
        }

        context.setState(Map1::SMS_MESSAGE);
        context.getState().Entry(context);
    }
    else if ((symbol == '?' && ctxt.sms == false) || symbol != '?')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::MESSAGE::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::MESSAGE::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_SMS_MESSAGE::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS_MESSAGE"
                << std::endl;
    }

    if (symbol == 'b')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE::digit(char symbol)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::SMS_MESSAGE::digit(char symbol)"
                << std::endl;
        }

        context.setState(Map1::SMS_MESSAGE_b);
        context.getState().Entry(context);
    }
    else if (symbol != 'b')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SMS_MESSAGE::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_SMS_MESSAGE_b::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS_MESSAGE_b"
                << std::endl;
    }

    if (symbol == 'o')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE_b::digit(char symbol)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::SMS_MESSAGE_b::digit(char symbol)"
                << std::endl;
        }

        context.setState(Map1::SMS_MESSAGE_o);
        context.getState().Entry(context);
    }
    else if (symbol != 'o')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE_b::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SMS_MESSAGE_b::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_SMS_MESSAGE_o::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS_MESSAGE_o"
                << std::endl;
    }

    if (symbol == 'd')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE_o::digit(char symbol)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::SMS_MESSAGE_o::digit(char symbol)"
                << std::endl;
        }

        context.setState(Map1::SMS_MESSAGE_d);
        context.getState().Entry(context);
    }
    else if (symbol != 'd')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE_o::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SMS_MESSAGE_o::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_SMS_MESSAGE_d::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS_MESSAGE_d"
                << std::endl;
    }

    if (symbol == 'y')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE_d::digit(char symbol)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::SMS_MESSAGE_d::digit(char symbol)"
                << std::endl;
        }

        context.setState(Map1::SMS_MESSAGE_y);
        context.getState().Entry(context);
    }
    else if (symbol != 'y')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE_d::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SMS_MESSAGE_d::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_SMS_MESSAGE_y::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS_MESSAGE_y"
                << std::endl;
    }

    if (symbol == '=')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE_y::digit(char symbol)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::SMS_MESSAGE_y::digit(char symbol)"
                << std::endl;
        }

        context.setState(Map1::SMS_TEXT);
        context.getState().Entry(context);
    }
    else if (symbol != '=')

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_MESSAGE_y::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SMS_MESSAGE_y::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::digit(context, symbol);
    }

}

void Map1_SMS_TEXT::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS_TEXT"
                << std::endl;
    }

    if (ctxt.isCorrectMess() == true)
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_TEXT::EOS()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Acceptable();
            ctxt.startAuto();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SMS_TEXT::EOS()"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.isCorrectMess() == false)

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_TEXT::EOS()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.falseStream();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SMS_TEXT::EOS()"
                    << std::endl;
            }

            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::EOS(context);
    }

}

void Map1_SMS_TEXT::digit(AppClassContext& context, char symbol)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SMS_TEXT"
                << std::endl;
    }

    if ((symbol >= 'A' && symbol <= 'Z') || (symbol >= 'a' && symbol <= 'z') ||
				(symbol <= '9' && symbol >= '0') || (symbol == '%' || symbol == ',' || symbol == '.' || symbol == '!' || symbol == '?'))
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SMS_TEXT::digit(char symbol)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.mPlusOne();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SMS_TEXT::digit(char symbol)"
                    << std::endl;
            }

            context.setState(Map1::SMS_TEXT);
        }
        catch (...)
        {
            context.setState(Map1::SMS_TEXT);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::digit(context, symbol);
    }

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
