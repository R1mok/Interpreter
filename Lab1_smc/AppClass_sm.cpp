//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//


//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s): 
//
// State Map
//	This state map is recognizes the regular expression 0*1*.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.5  2005/05/28 13:31:16  cwrapp
// Updated C++ examples.
//
// Revision 1.1  2005/02/21 14:19:18  charlesr
// Added spaces around header file name to test SMC.
//
// Revision 1.0  2003/12/14 19:11:57  charlesr
// Initial revision
//


#include "AppClass.h"
#include "C:\smc-git-code-b058839dba1b0c62de2a6ea5f31c54d57f075381-20210913T092731Z-001\smc-git-code-b058839dba1b0c62de2a6ea5f31c54d57f075381\examples\C++\Lab1_smc\AppClass_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_Tel Map1::Tel("Map1::Tel", 1);
Map1_Sms Map1::Sms("Map1::Sms", 2);
Map1_Fax Map1::Fax("Map1::Fax", 3);
Map1_Number Map1::Number("Map1::Number", 4);
Map1_Digit Map1::Digit("Map1::Digit", 5);
Map1_MessageText Map1::MessageText("Map1::MessageText", 6);
Map1_Correct Map1::Correct("Map1::Correct", 7);
Map1_Error Map1::Error("Map1::Error", 8);

void AppClassState::CorrectMessage(AppClassContext& context)
{
    Default(context);
}

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Message(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Unknown(AppClassContext& context)
{
    Default(context);
}

void AppClassState::digit(AppClassContext& context)
{
    Default(context);
}

void AppClassState::fax(AppClassContext& context)
{
    Default(context);
}

void AppClassState::number(AppClassContext& context)
{
    Default(context);
}

void AppClassState::sms(AppClassContext& context)
{
    Default(context);
}

void AppClassState::tel(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Start::Unknown(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::Unknown()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Start::Unknown()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::fax(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::fax()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Start::fax()"
            << std::endl;
    }

    context.setState(Map1::Fax);
    context.getState().Entry(context);

}

void Map1_Start::sms(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::sms()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Start::sms()"
            << std::endl;
    }

    context.setState(Map1::Sms);
    context.getState().Entry(context);

}

void Map1_Start::tel(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::tel()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Start::tel()"
            << std::endl;
    }

    context.setState(Map1::Tel);
    context.getState().Entry(context);

}

void Map1_Tel::Unknown(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Tel"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Tel::Unknown()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Tel::Unknown()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Tel::number(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Tel"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Tel::number()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Tel::number()"
            << std::endl;
    }

    context.setState(Map1::Number);
    context.getState().Entry(context);

}

void Map1_Sms::Unknown(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Sms"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Sms::Unknown()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Sms::Unknown()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Sms::number(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Sms"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Sms::number()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Sms::number()"
            << std::endl;
    }

    context.setState(Map1::Number);
    context.getState().Entry(context);

}

void Map1_Fax::Unknown(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Fax"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Fax::Unknown()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Fax::Unknown()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Fax::number(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Fax"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Fax::number()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Fax::number()"
            << std::endl;
    }

    context.setState(Map1::Number);
    context.getState().Entry(context);

}

void Map1_Number::Unknown(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Number"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Number::Unknown()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Number::Unknown()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Number::digit(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Number"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Number::digit()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Number::digit()"
            << std::endl;
    }

    context.setState(Map1::Digit);
    context.getState().Entry(context);

}

void Map1_Digit::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Digit"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Digit::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Digit::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Digit::Message(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Digit"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Digit::Message()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Digit::Message()"
            << std::endl;
    }

    context.setState(Map1::MessageText);
    context.getState().Entry(context);

}

void Map1_Digit::Unknown(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Digit"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Digit::Unknown()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Digit::Unknown()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Digit::digit(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Digit"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Digit::digit()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Digit::digit()"
            << std::endl;
    }

    context.setState(Map1::Digit);
    context.getState().Entry(context);

}

void Map1_Digit::number(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Digit"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Digit::number()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Digit::number()"
            << std::endl;
    }

    context.setState(Map1::Number);
    context.getState().Entry(context);

}

void Map1_MessageText::CorrectMessage(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MessageText"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MessageText::CorrectMessage()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::MessageText::CorrectMessage()"
            << std::endl;
    }

    context.setState(Map1::Correct);
    context.getState().Entry(context);

}

void Map1_MessageText::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MessageText"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MessageText::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::MessageText::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_MessageText::Unknown(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::MessageText"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::MessageText::Unknown()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::MessageText::Unknown()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Correct::CorrectMessage(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Correct"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Correct::CorrectMessage()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Correct::CorrectMessage()"
            << std::endl;
    }

    context.setState(Map1::Correct);
    context.getState().Entry(context);

}

void Map1_Correct::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Correct"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Correct::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Correct::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Correct::Unknown(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Correct"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Correct::Unknown()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Correct::Unknown()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::CorrectMessage(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Error"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Error::CorrectMessage()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Error::CorrectMessage()"
            << std::endl;
    }


}

void Map1_Error::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Error"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Error::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Error::EOS()"
                << std::endl;
        }

        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Error::Message(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Error"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Error::Message()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Error::Message()"
            << std::endl;
    }


}

void Map1_Error::Unknown(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Error"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Error::Unknown()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Error::Unknown()"
            << std::endl;
    }


}

void Map1_Error::digit(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Error"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Error::digit()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Error::digit()"
            << std::endl;
    }


}

void Map1_Error::number(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Error"
                << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Error::number()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Error::number()"
            << std::endl;
    }


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
