//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#ifndef APPCLASS_SM_H
#define APPCLASS_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_Tel;
class Map1_Sms;
class Map1_Fax;
class Map1_Number;
class Map1_Digit;
class Map1_MessageText;
class Map1_Correct;
class Map1_Error;
class Map1_Default;
class AppClassState;
class AppClassContext;
class AppClass;

class AppClassState :
    public statemap::State
{
public:

    AppClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(AppClassContext&) {};
    virtual void Exit(AppClassContext&) {};

    virtual void CorrectMessage(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
    virtual void Message(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
    virtual void digit(AppClassContext& context);
    virtual void fax(AppClassContext& context);
    virtual void number(AppClassContext& context);
    virtual void sms(AppClassContext& context);
    virtual void tel(AppClassContext& context);

protected:

    virtual void Default(AppClassContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_Tel Tel;
    static Map1_Sms Sms;
    static Map1_Fax Fax;
    static Map1_Number Number;
    static Map1_Digit Digit;
    static Map1_MessageText MessageText;
    static Map1_Correct Correct;
    static Map1_Error Error;
};

class Map1_Default :
    public AppClassState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : AppClassState(name, stateId)
    {};

};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Unknown(AppClassContext& context);
    virtual void fax(AppClassContext& context);
    virtual void sms(AppClassContext& context);
    virtual void tel(AppClassContext& context);
};

class Map1_Tel :
    public Map1_Default
{
public:
    Map1_Tel(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Unknown(AppClassContext& context);
    virtual void number(AppClassContext& context);
};

class Map1_Sms :
    public Map1_Default
{
public:
    Map1_Sms(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Unknown(AppClassContext& context);
    virtual void number(AppClassContext& context);
};

class Map1_Fax :
    public Map1_Default
{
public:
    Map1_Fax(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Unknown(AppClassContext& context);
    virtual void number(AppClassContext& context);
};

class Map1_Number :
    public Map1_Default
{
public:
    Map1_Number(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Unknown(AppClassContext& context);
    virtual void digit(AppClassContext& context);
};

class Map1_Digit :
    public Map1_Default
{
public:
    Map1_Digit(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void Message(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
    virtual void digit(AppClassContext& context);
    virtual void number(AppClassContext& context);
};

class Map1_MessageText :
    public Map1_Default
{
public:
    Map1_MessageText(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CorrectMessage(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
};

class Map1_Correct :
    public Map1_Default
{
public:
    Map1_Correct(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CorrectMessage(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
};

class Map1_Error :
    public Map1_Default
{
public:
    Map1_Error(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CorrectMessage(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
    virtual void Message(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
    virtual void digit(AppClassContext& context);
    virtual void number(AppClassContext& context);
};

class AppClassContext :
    public statemap::FSMContext
{
public:

    explicit AppClassContext(AppClass& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    AppClassContext(AppClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline AppClass& getOwner()
    {
        return (_owner);
    };

    inline AppClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<AppClassState&>(*_state);
    };

    inline void CorrectMessage()
    {
        setTransition("CorrectMessage");
        getState().CorrectMessage(*this);
        setTransition(NULL);
    };

    inline void EOS()
    {
        setTransition("EOS");
        getState().EOS(*this);
        setTransition(NULL);
    };

    inline void Message()
    {
        setTransition("Message");
        getState().Message(*this);
        setTransition(NULL);
    };

    inline void Unknown()
    {
        setTransition("Unknown");
        getState().Unknown(*this);
        setTransition(NULL);
    };

    inline void digit()
    {
        setTransition("digit");
        getState().digit(*this);
        setTransition(NULL);
    };

    inline void fax()
    {
        setTransition("fax");
        getState().fax(*this);
        setTransition(NULL);
    };

    inline void number()
    {
        setTransition("number");
        getState().number(*this);
        setTransition(NULL);
    };

    inline void sms()
    {
        setTransition("sms");
        getState().sms(*this);
        setTransition(NULL);
    };

    inline void tel()
    {
        setTransition("tel");
        getState().tel(*this);
        setTransition(NULL);
    };

private:
    AppClass& _owner;
};


#endif // APPCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
