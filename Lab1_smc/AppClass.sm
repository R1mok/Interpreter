// -*- tab-width: 4; -*-

%{
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s): 
//
// State Map
//	This state map is recognizes the regular expression 0*1*.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.5  2005/05/28 13:31:16  cwrapp
// Updated C++ examples.
//
// Revision 1.1  2005/02/21 14:19:18  charlesr
// Added spaces around header file name to test SMC.
//
// Revision 1.0  2003/12/14 19:11:57  charlesr
// Initial revision
//
%}

%start Map1::Start
%class AppClass
%header   AppClass.h

%map Map1
%%
// State		Transition															End State		Action(s)
Start
{
				next_state(str: std::string) [ctxt.prefixFaxTel(str) == true]		NUMBER			{notSMS();}
				next_state(str: std::string) [ctxt.prefixSMS(str) == true]			NUMBER			{isSMS();}
				next_state(str: std::string) [ctxt.prefixSMS(str) == false && ctxt.prefixFaxTel(str) == false]		Start		{Unacceptable(); falseStream();}
				EOS		Start	{startAuto();}
}
NUMBER
{
				digit(symbol: char) [symbol != '+' && symbol != ';']			Start			{Unacceptable(); falseStream();}
				digit(symbol: char) [symbol == '+']								PLUS			{addChar(symbol); kIsNull();}
				digit(symbol: char) [symbol == ';']								NUMBER			{addNumber();}
}
PLUS
{
				digit(symbol: char) [symbol >= '0' && symbol <= '9']			DIGIT			{addChar(symbol); kPlusOne();}
				digit(symbol: char) [symbol < '0' || symbol > '9']				Start			{Unacceptable(); falseStream();} 
}
DIGIT
{
				digit(symbol: char) [symbol >= '0' && symbol <= '9']			DIGIT			{addChar(symbol); kPlusOne();}
				digit(symbol: char) [symbol == ',' && ctxt.isCorrectNumber() == true]		NUMBER			{addNumber();}
				digit(symbol: char) [symbol == ';' && ctxt.isCorrectNumber() == true]		MESSAGE			{addNumber();}
				digit(symbol: char) [((symbol == ';' || symbol == ',') && ctxt.isCorrectNumber() == false)
				|| ((symbol < '0' && symbol != ',') || (symbol > '9' && symbol != ';'))]	Start  {Unacceptable(); falseStream();}
}
MESSAGE
{
				EOS			Start			{Acceptable(); startAuto();}
				digit(symbol: char) [symbol == '?' && ctxt.sms == true]		SMS_MESSAGE		{}
				digit(symbol: char) [(symbol == '?' && ctxt.sms == false) || symbol != '?']		Start			{Unacceptable(); falseStream();}
}

SMS_MESSAGE
{
				digit(symbol: char) [symbol == 'b']		SMS_MESSAGE_b	{}
				digit(symbol: char) [symbol != 'b']		Start			{Unacceptable(); falseStream();}
}
SMS_MESSAGE_b
{
				digit(symbol: char) [symbol == 'o']		SMS_MESSAGE_o	{}
				digit(symbol: char) [symbol != 'o']		Start			{Unacceptable(); falseStream();}
}
SMS_MESSAGE_o
{
				digit(symbol: char) [symbol == 'd']		SMS_MESSAGE_d	{}
				digit(symbol: char) [symbol != 'd']		Start			{Unacceptable(); falseStream();}
}
SMS_MESSAGE_d
{
				digit(symbol: char) [symbol == 'y']		SMS_MESSAGE_y	{}
				digit(symbol: char) [symbol != 'y']		Start			{Unacceptable(); falseStream();}
}
SMS_MESSAGE_y
{
				digit(symbol: char) [symbol == '=']		SMS_TEXT		{}
				digit(symbol: char) [symbol != '=']		Start			{Unacceptable(); falseStream();}
}
SMS_TEXT
{
				digit(symbol: char) [(symbol >= 'A' && symbol <= 'Z') || (symbol >= 'a' && symbol <= 'z') ||
				(symbol <= '9' && symbol >= '0') || (symbol == '%' || symbol == ',' || symbol == '.' || symbol == '!' || symbol == '?')]
				SMS_TEXT			{mPlusOne();}
				EOS[ctxt.isCorrectMess() == true]		Start	{Acceptable(); startAuto();}
				EOS[ctxt.isCorrectMess() == false]		Start	{Unacceptable(); falseStream();}

}
%%
