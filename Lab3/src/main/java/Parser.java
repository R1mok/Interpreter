
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import javafx.util.Pair;
import java.util.HashSet;
import java.util.Set;
import java.util.Objects;
import java.util.LinkedList;
import java.io.*;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\023\012\000\002\016\004\000\002\016\005" +
    "\000\002\016\002\000\002\022\004\000\002\022\003\000" +
    "\002\021\005\000\002\021\003\000\002\021\006\000\002" +
    "\021\011\000\002\021\011\000\002\021\011\000\002\021" +
    "\011\000\002\021\005\000\002\021\003\000\002\021\004" +
    "\000\002\021\004\000\002\014\004\000\002\014\005\000" +
    "\002\014\002\000\002\037\002\000\002\015\007\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\002\005" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\005\000\002" +
    "\030\004\000\002\034\005\000\002\032\004\000\002\032" +
    "\007\000\002\026\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\006\003\000\002\007" +
    "\004\000\002\010\004\000\002\012\005\000\002\011\004" +
    "\000\002\013\005\000\002\025\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\012\032\015\033\012\035\020\036\006\001" +
    "\002\000\004\034\uffe5\001\002\000\004\034\uffe3\001\002" +
    "\000\012\032\015\033\012\035\020\036\006\001\002\000" +
    "\014\002\uffff\032\uffff\033\uffff\035\uffff\036\uffff\001\002" +
    "\000\004\034\uffe4\001\002\000\014\002\212\032\015\033" +
    "\012\035\020\036\006\001\002\000\004\034\uffcc\001\002" +
    "\000\004\034\uffe8\001\002\000\004\034\027\001\002\000" +
    "\012\032\015\033\012\035\020\036\006\001\002\000\004" +
    "\034\uffe6\001\002\000\004\034\uffe7\001\002\000\010\032" +
    "\022\033\023\036\021\001\002\000\012\032\015\033\012" +
    "\035\020\036\006\001\002\000\012\032\015\033\012\035" +
    "\020\036\006\001\002\000\004\034\uffcb\001\002\000\004" +
    "\034\uffc9\001\002\000\004\034\uffc7\001\002\000\004\034" +
    "\uffca\001\002\000\004\011\030\001\002\000\014\012\ufffb" +
    "\014\040\032\037\033\012\036\006\001\002\000\004\034" +
    "\205\001\002\000\016\004\uffdd\012\uffdd\014\uffdd\032\uffdd" +
    "\033\uffdd\036\uffdd\001\002\000\020\004\uffe0\012\uffe0\013" +
    "\203\014\uffe0\032\uffe0\033\uffe0\036\uffe0\001\002\000\014" +
    "\012\ufffb\014\040\032\037\033\012\036\006\001\002\000" +
    "\016\004\uffde\012\uffde\014\uffde\032\uffde\033\uffde\036\uffde" +
    "\001\002\000\016\004\uffdf\012\uffdf\014\uffdf\032\uffdf\033" +
    "\uffdf\036\uffdf\001\002\000\012\032\015\033\012\035\020" +
    "\036\006\001\002\000\010\032\037\033\012\036\006\001" +
    "\002\000\020\004\uffe1\012\uffe1\013\174\014\uffe1\032\uffe1" +
    "\033\uffe1\036\uffe1\001\002\000\004\012\045\001\002\000" +
    "\004\034\044\001\002\000\020\004\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\032\uffdb\033\uffdb\036\uffdb\001\002\000\004\022" +
    "\046\001\002\000\026\004\052\026\053\027\061\030\051" +
    "\031\057\032\037\033\012\034\056\036\006\037\054\001" +
    "\002\000\004\004\173\001\002\000\030\004\052\023\ufff9" +
    "\026\053\027\061\030\051\031\057\032\037\033\012\034" +
    "\056\036\006\037\054\001\002\000\004\011\164\001\002" +
    "\000\030\004\ufff7\023\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037\ufff7\001\002" +
    "\000\004\011\156\001\002\000\010\011\070\021\067\034" +
    "\071\001\002\000\030\004\ufff0\023\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0\037" +
    "\ufff0\001\002\000\010\011\124\013\144\024\143\001\002" +
    "\000\004\034\140\001\002\000\004\004\137\001\002\000" +
    "\004\011\064\001\002\000\004\023\063\001\002\000\014" +
    "\002\ufffe\032\ufffe\033\ufffe\035\ufffe\036\ufffe\001\002\000" +
    "\010\011\070\021\067\034\071\001\002\000\040\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\025\uffcd\032\uffcd\033\uffcd" +
    "\036\uffcd\001\002\000\040\004\uffd1\005\uffd1\006\uffd1\007" +
    "\111\010\110\012\uffd1\014\uffd1\015\107\016\uffd1\017\uffd1" +
    "\020\uffd1\025\uffd1\032\uffd1\033\uffd1\036\uffd1\001\002\000" +
    "\040\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\025\uffc5\032" +
    "\uffc5\033\uffc5\036\uffc5\001\002\000\010\011\070\021\067" +
    "\034\071\001\002\000\044\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\124\012\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\024\104\025\uffc4\032\uffc4\033\uffc4\036" +
    "\uffc4\001\002\000\016\005\077\006\100\012\075\016\074" +
    "\017\076\020\101\001\002\000\032\004\uffd7\005\uffd7\006" +
    "\uffd7\012\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\025\uffd7" +
    "\032\uffd7\033\uffd7\036\uffd7\001\002\000\010\011\070\021" +
    "\067\034\103\001\002\000\004\022\120\001\002\000\010" +
    "\011\070\021\067\034\103\001\002\000\010\011\070\021" +
    "\067\034\103\001\002\000\010\011\070\021\067\034\103" +
    "\001\002\000\010\011\070\021\067\034\103\001\002\000" +
    "\040\004\uffd4\005\uffd4\006\uffd4\007\111\010\110\012\uffd4" +
    "\014\uffd4\015\107\016\uffd4\017\uffd4\020\uffd4\025\uffd4\032" +
    "\uffd4\033\uffd4\036\uffd4\001\002\000\042\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\012\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\024\104\025\uffc4\032\uffc4\033\uffc4" +
    "\036\uffc4\001\002\000\010\011\070\021\067\034\071\001" +
    "\002\000\016\005\077\006\100\016\074\017\076\020\101" +
    "\025\106\001\002\000\040\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\025\uffc3\032\uffc3\033\uffc3\036\uffc3\001\002\000" +
    "\010\011\070\021\067\034\103\001\002\000\010\011\070" +
    "\021\067\034\103\001\002\000\010\011\070\021\067\034" +
    "\103\001\002\000\040\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\025\uffd0\032\uffd0\033\uffd0\036\uffd0\001\002\000\040" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\025\uffcf\032\uffcf" +
    "\033\uffcf\036\uffcf\001\002\000\040\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\012\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\025\uffce\032\uffce\033\uffce\036\uffce\001" +
    "\002\000\040\004\uffd2\005\uffd2\006\uffd2\007\111\010\110" +
    "\012\uffd2\014\uffd2\015\107\016\uffd2\017\uffd2\020\uffd2\025" +
    "\uffd2\032\uffd2\033\uffd2\036\uffd2\001\002\000\040\004\uffd3" +
    "\005\uffd3\006\uffd3\007\111\010\110\012\uffd3\014\uffd3\015" +
    "\107\016\uffd3\017\uffd3\020\uffd3\025\uffd3\032\uffd3\033\uffd3" +
    "\036\uffd3\001\002\000\040\004\uffd6\005\uffd6\006\uffd6\007" +
    "\111\010\110\012\uffd6\014\uffd6\015\107\016\uffd6\017\uffd6" +
    "\020\uffd6\025\uffd6\032\uffd6\033\uffd6\036\uffd6\001\002\000" +
    "\026\004\052\026\053\027\061\030\051\031\057\032\037" +
    "\033\012\034\056\036\006\037\054\001\002\000\004\023" +
    "\122\001\002\000\030\004\ufff3\023\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\036\ufff3\037" +
    "\ufff3\001\002\000\040\004\uffd5\005\uffd5\006\uffd5\007\111" +
    "\010\110\012\uffd5\014\uffd5\015\107\016\uffd5\017\uffd5\020" +
    "\uffd5\025\uffd5\032\uffd5\033\uffd5\036\uffd5\001\002\000\010" +
    "\012\uffea\014\uffea\034\uffea\001\002\000\010\012\uffeb\014" +
    "\126\034\130\001\002\000\004\034\133\001\002\000\004" +
    "\012\132\001\002\000\010\012\uffeb\014\126\034\130\001" +
    "\002\000\004\012\uffed\001\002\000\050\004\uffe9\005\uffe9" +
    "\006\uffe9\012\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9\023" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\036\uffe9\037\uffe9\001\002\000\010\012" +
    "\uffeb\014\126\034\130\001\002\000\004\012\uffec\001\002" +
    "\000\016\005\077\006\100\012\136\016\074\017\076\020" +
    "\101\001\002\000\040\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\025\uffc6\032\uffc6\033\uffc6\036\uffc6\001\002\000\030" +
    "\004\uffee\023\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\036\uffee\037\uffee\001\002\000\004" +
    "\034\141\001\002\000\004\011\124\001\002\000\030\004" +
    "\ufff1\023\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\036\ufff1\037\ufff1\001\002\000\010\011" +
    "\070\021\067\034\071\001\002\000\010\011\070\021\067" +
    "\034\071\001\002\000\016\004\146\005\077\006\100\016" +
    "\074\017\076\020\101\001\002\000\030\004\ufff6\023\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\036\ufff6\037\ufff6\001\002\000\016\005\077\006\100" +
    "\016\074\017\076\020\101\025\150\001\002\000\004\013" +
    "\151\001\002\000\010\011\070\021\067\034\071\001\002" +
    "\000\016\004\153\005\077\006\100\016\074\017\076\020" +
    "\101\001\002\000\030\004\ufff5\023\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037" +
    "\ufff5\001\002\000\016\004\155\005\077\006\100\016\074" +
    "\017\076\020\101\001\002\000\030\004\ufff8\023\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\036\ufff8\037\ufff8\001\002\000\010\011\070\021\067\034" +
    "\071\001\002\000\016\005\077\006\100\012\160\016\074" +
    "\017\076\020\101\001\002\000\004\022\161\001\002\000" +
    "\026\004\052\026\053\027\061\030\051\031\057\032\037" +
    "\033\012\034\056\036\006\037\054\001\002\000\004\023" +
    "\163\001\002\000\030\004\ufff4\023\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4\037" +
    "\ufff4\001\002\000\010\011\070\021\067\034\071\001\002" +
    "\000\016\005\077\006\100\012\166\016\074\017\076\020" +
    "\101\001\002\000\004\022\167\001\002\000\026\004\052" +
    "\026\053\027\061\030\051\031\057\032\037\033\012\034" +
    "\056\036\006\037\054\001\002\000\004\023\171\001\002" +
    "\000\030\004\ufff2\023\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\036\ufff2\037\ufff2\001\002" +
    "\000\004\023\ufffa\001\002\000\030\004\uffef\023\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\036\uffef\037\uffef\001\002\000\010\011\070\021\067\034" +
    "\071\001\002\000\030\004\uffe2\005\077\006\100\012\uffe2" +
    "\014\uffe2\016\074\017\076\020\101\032\uffe2\033\uffe2\036" +
    "\uffe2\001\002\000\014\012\ufffb\014\040\032\037\033\012" +
    "\036\006\001\002\000\004\012\ufffc\001\002\000\004\034" +
    "\201\001\002\000\020\004\uffda\012\uffda\013\uffda\014\uffda" +
    "\032\uffda\033\uffda\036\uffda\001\002\000\004\012\ufffd\001" +
    "\002\000\010\011\070\021\067\034\071\001\002\000\030" +
    "\004\uffdc\005\077\006\100\012\uffdc\014\uffdc\016\074\017" +
    "\076\020\101\032\uffdc\033\uffdc\036\uffdc\001\002\000\020" +
    "\004\uffd9\012\uffd9\014\uffd9\024\206\032\uffd9\033\uffd9\036" +
    "\uffd9\001\002\000\010\011\070\021\067\034\071\001\002" +
    "\000\016\005\077\006\100\016\074\017\076\020\101\025" +
    "\210\001\002\000\016\004\uffd8\012\uffd8\014\uffd8\032\uffd8" +
    "\033\uffd8\036\uffd8\001\002\000\014\002\001\032\001\033" +
    "\001\035\001\036\001\001\002\000\004\002\000\001\002" +
    "\000\004\034\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\024\004\010\005\013\006\016\007\012\010" +
    "\003\011\004\012\015\013\007\023\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\212\006\016\007" +
    "\012\010\003\011\004\012\015\013\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\013\006\016\007" +
    "\012\010\003\011\004\012\015\013\007\023\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\025\006\016\007\012\010\003\011\004\012\015" +
    "\013\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\024\006\016\007\012\010\003" +
    "\011\004\012\015\013\007\001\001\000\020\005\023\006" +
    "\016\007\012\010\003\011\004\012\015\013\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\033\006\042" +
    "\011\030\016\041\030\040\032\034\033\031\034\032\035" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\033\006\042\011\030\016\201\030" +
    "\040\032\034\033\031\034\032\035\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\177\006\016\007" +
    "\012\010\003\011\004\012\015\013\007\001\001\000\022" +
    "\002\175\006\042\011\030\030\040\032\034\033\031\034" +
    "\032\035\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\046\006\042\011\030\015\054\017\057\021\047" +
    "\022\061\030\040\032\034\033\031\034\032\035\035\001" +
    "\001\000\002\001\001\000\032\002\046\006\042\011\030" +
    "\015\054\017\057\021\047\022\171\030\040\032\034\033" +
    "\031\034\032\035\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\072\024\065\025" +
    "\064\026\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\072\024\065" +
    "\025\064\026\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\072\024\065\025\064" +
    "\026\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\122\025\064\001\001\000\002" +
    "\001\001\000\006\024\116\025\064\001\001\000\006\024" +
    "\115\025\064\001\001\000\006\024\114\025\064\001\001" +
    "\000\006\024\101\025\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\072\024\065\025\064\026\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\113\001\001\000\004\025\112\001\001\000\004\025\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\046\006\042\011\030\015\054\017\057\021" +
    "\047\022\120\030\040\032\034\033\031\034\032\035\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\124\001\001\000\004\014\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\072\024\065\025" +
    "\064\026\146\001\001\000\012\015\072\024\065\025\064" +
    "\026\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\072\024\065" +
    "\025\064\026\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\072" +
    "\024\065\025\064\026\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\046\006\042\011\030\015\054" +
    "\017\057\021\047\022\161\030\040\032\034\033\031\034" +
    "\032\035\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\072\024\065\025\064\026\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\046\006\042" +
    "\011\030\015\054\017\057\021\047\022\167\030\040\032" +
    "\034\033\031\034\032\035\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\072\024\065\025\064\026\174\001\001\000\002" +
    "\001\001\000\024\002\033\006\042\011\030\016\176\030" +
    "\040\032\034\033\031\034\032\035\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\072\024\065\025\064\026\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\072\024" +
    "\065\025\064\026\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /** User initialization code. */
    VarFunctionsContext context = new VarFunctionsContext();
    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
        typenames.peek().add(name);
    }
    Set<Pair<String, Integer>> varArray = new HashSet();
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
    }
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

   public static class Main {
     static public void main(String argv[]) {
       /* Start the parser */
       try {
         Parser p = new Parser(new Lexer(new FileReader(argv[0])));
         System.out.println("Start parsing");
         p.context.newScope();
         Program result = (Program) p.parse().value;
         p.context.deleteScope();
         System.out.println(p.context.ex(p.context.rootFunc("main")));
         p.context.getFunctions();
         p.context.getVariables();
         System.out.println("Finish parsing");
       } catch (Exception e) {
         /* do cleanup here -- possibly rethrow e */
         System.out.println("");
         e.printStackTrace();
       }
     }
   }
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programm ::= programm function 
            {
              Program RESULT =null;
		 RESULT = new Program(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programm ::= function 
            {
              Program RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function ::= type NAME LPAREN function_parametrs_declaration RPAREN LBRACE function_body RBRACE 
            {
              Opr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr fp = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr b = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 context.registerFunction(new FunctionDefinition(t, n, fp, b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_parametrs_declaration ::= initialize function_parametrs_declaration 
            {
              Opr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr i = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fpd = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Opr res = new Opr(NodeType.OPR, operType.NEXTSTMT);
                res.addInListOpr(i);
                if (fpd != null)
                    res.addInListOpr(fpd);
                RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_parametrs_declaration ::= COMMA initialize function_parametrs_declaration 
            {
              Opr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr i = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fpd = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.NEXTSTMT);
                res.addInListOpr(i);
                if (fpd != null)
                    res.addInListOpr(fpd);
                RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_parametrs_declaration ::= 
            {
              Opr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_body ::= statement function_body 
            {
              Opr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr b = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Opr res = new Opr(NodeType.OPR, operType.NEXTSTMT);
                res.addInListOpr(s);
                res.addInListOpr(b);
                RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_body ::= statement 
            {
              Opr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR);
                res.addInListOpr(s);
                RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= RETURN expr SEMI 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr n = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                if (n instanceof Variable) {
                    Opr res = new Opr(NodeType.OPR, operType.RETURN);
                    Variable var = context.getVar(((Variable) n).getName());
                    res.addInListOpr(var);
                    RESULT = res;
                    } else {
                    RESULT = n;
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= SEMI 
            {
              Opr RESULT =null;
		 Opr res = new Opr(NodeType.OPR, operType.SEMI);
                 RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= NAME ASSIGN expr SEMI 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                res.addInListOpr(e);
                RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= NAME LSQUARE expr RSQUARE ASSIGN expr SEMI 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr i = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                res.addInListOpr(i);
                res.addInListOpr(e);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= WHILE LPAREN expr RPAREN LBRACE function_body RBRACE 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr res = new Opr(NodeType.OPR, operType.WHILE);
                res.addInListOpr(e);
                res.addInListOpr(s);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= ZERO LPAREN expr RPAREN LBRACE function_body RBRACE 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr res = new Opr(NodeType.OPR, operType.ZERO);
                res.addInListOpr(e);
                res.addInListOpr(s);
                RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= NOTZERO LPAREN expr RPAREN LBRACE function_body RBRACE 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr res = new Opr(NodeType.OPR, operType.NOTZERO);
                res.addInListOpr(e);
                res.addInListOpr(s);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= FOREACH NAME function_call 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fc = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Opr res = new Opr(NodeType.OPR, operType.FOREACH);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                res.addInListOpr(fc);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= function_call 
            {
              Opr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fc = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= initialize SEMI 
            {
              Opr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr i = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= expr_list SEMI 
            {
              Opr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_parametrs ::= NAME function_parametrs 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fp = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                if (fp != null)
                    res.addInListOpr(fp);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_parametrs ::= COMMA NAME function_parametrs 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fp = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Variable var = context.getVar(n);
                RESULT = var;
                Opr res = new Opr(NodeType.OPR);
                res.addInListOpr(var);
                if (fp != null)
                    res.addInListOpr(fp);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_parametrs ::= 
            {
              Opr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 context.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_call ::= NAME LPAREN NT$0 function_parametrs RPAREN 
            {
              Opr RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Opr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr p = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr funcParams = context.funcParametrs(n);
                Opr res = new Opr(NodeType.OPR, operType.FUNC_CALL);
                res.addInListOpr(context.rootFunc(n));
                res.addInListOpr(funcParams);
                res.addInListOpr(p);
                RESULT = res;
                context.deleteScope();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= const_value 
            {
              Types RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types v = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= value 
            {
              Types RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types v = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= const_pointer 
            {
              Types RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types p = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= pointer 
            {
              Types RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types p = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= const_array_of 
            {
              Types RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= array_of 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // initialize ::= defenition_value ASSIGN expr 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr n = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                      res.addInListOpr(e);
                      res.addInListOpr(n);
                      RESULT = res;
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // initialize ::= defenition_value 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // initialize ::= defenition_pointer 
            {
              Opr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr p = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // initialize ::= defeniniton_const_pointer 
            {
              Opr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr p = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // initialize ::= defenition_array_of 
            {
              Opr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr a = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // initialize ::= defenition_const_array_of 
            {
              Opr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr a = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // initialize ::= defenition_pointer ASSIGN expr 
            {
              Opr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr p = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                      res.addInListOpr(p);
                      res.addInListOpr(e);
                      RESULT = res;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // defenition_value ::= value NAME 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     Variable var = new Variable(Types.VALUE, n);
                     context.addVar(var);
                     var.setValue(new Const(0));
                     RESULT = var;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_value",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // defenition_pointer ::= POINTER type NAME 
            {
              Opr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = new Variable(Types.POINTER, n);
                     context.addVar(var);
                     var.setValue(new Variable(t, n));
                     RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_pointer",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // defenition_array_of ::= array_of NAME 
            {
              Opr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = new Variable(Types.ARRAY_OF, n);
                    context.addVar(var);
                    Opr res = new Opr(NodeType.VAR);
                    res.addInListOpr(var);
                    res.addInListOpr(new Const(4));
                    RESULT = res;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_array_of",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // defenition_array_of ::= array_of NAME LSQUARE expr RSQUARE 
            {
              Opr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Variable var = new Variable(Types.ARRAY_OF, n);
                    context.addVar(var);
                    Opr res = new Opr(NodeType.VAR);
                    res.addInListOpr(var);
                    res.addInListOpr(e);
                    RESULT = res;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_array_of",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= function_call 
            {
              Opr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fc = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr LTE factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.LTE);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr GTE factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.GTE);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr NE factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.NE);
                 res.addInListOpr(e);
                 res.addInListOpr(f);
                 RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr PLUS factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  Opr res = new Opr(NodeType.OPR, operType.PLUS);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MINUS factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.MINUS);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= factor 
            {
              Opr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= factor TIMES term 
            {
              Opr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr t = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.TIMES);
                  res.addInListOpr(f);
                  res.addInListOpr(t);
                  RESULT = res;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= factor DIVIDE term 
            {
              Opr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr t = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 Opr res = new Opr(NodeType.OPR, operType.DIVIDE);
                 res.addInListOpr(f);
                 res.addInListOpr(t);
                 RESULT = res;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= factor MOD term 
            {
              Opr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr t = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 Opr res = new Opr(NodeType.OPR, operType.MOD);
                 res.addInListOpr(f);
                 res.addInListOpr(t);
                 RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= term 
            {
              Opr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr t = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= VALUE 
            {
              Types RESULT =null;
		 RESULT = Types.VALUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // const_value ::= CONST VALUE 
            {
              Types RESULT =null;
		 RESULT = Types.CONST_VALUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_value",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pointer ::= POINTER type 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Types.POINTER; RESULT.setType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // const_pointer ::= CONST POINTER type 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Types.CONST_POINTER; RESULT.setType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_pointer",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // array_of ::= ARRAY_OF type 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_of",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // const_array_of ::= CONST ARRAY_OF type 
            {
              Types RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_array_of",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= LPAREN expr RPAREN 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= NUMBER 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Opr) new Const(n);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= NAME 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = context.getVar(n);
                 RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= NAME LSQUARE expr RSQUARE 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Variable var = context.getVar(n);
                 Opr res = new Opr(NodeType.OPR, operType.TAKE_FROM_ARRAY);
                 res.addInListOpr(var);
                 res.addInListOpr(e);
                 RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
