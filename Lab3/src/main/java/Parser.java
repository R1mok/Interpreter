
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import javafx.util.Pair;
import java.util.HashSet;
import java.util.Set;
import java.util.Objects;
import java.util.LinkedList;
import java.io.*;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\041\002\000\002\042\002\000\002\043\002" +
    "\000\002\023\015\000\002\016\004\000\002\016\005\000" +
    "\002\016\002\000\002\022\004\000\002\022\003\000\002" +
    "\021\004\000\002\021\005\000\002\021\003\000\002\021" +
    "\004\000\002\021\006\000\002\021\011\000\002\044\002" +
    "\000\002\021\010\000\002\021\003\000\002\021\011\000" +
    "\002\021\011\000\002\021\006\000\002\021\003\000\002" +
    "\021\004\000\002\021\004\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\045\002\000\002\024\012\000" +
    "\002\014\004\000\002\014\005\000\002\014\002\000\002" +
    "\015\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\002\005\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\005\000\002\032\004\000\002\032\004\000\002\036" +
    "\005\000\002\034\004\000\002\034\007\000\002\027\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\003\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\006\003\000\002\007\004\000\002\010\004" +
    "\000\002\012\005\000\002\011\004\000\002\013\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\012\034\015\035\012\037\020\040\006\001" +
    "\002\000\004\036\uffd6\001\002\000\004\036\uffda\001\002" +
    "\000\012\034\015\035\012\037\020\040\006\001\002\000" +
    "\014\002\uffff\034\uffff\035\uffff\037\uffff\040\uffff\001\002" +
    "\000\004\036\uffd5\001\002\000\014\002\241\034\015\035" +
    "\012\037\020\040\006\001\002\000\004\036\uffbd\001\002" +
    "\000\004\036\uffd9\001\002\000\004\036\027\001\002\000" +
    "\012\034\015\035\012\037\020\040\006\001\002\000\004" +
    "\036\uffd7\001\002\000\004\036\uffd8\001\002\000\010\034" +
    "\022\035\023\040\021\001\002\000\012\034\015\035\012" +
    "\037\020\040\006\001\002\000\012\034\015\035\012\037" +
    "\020\040\006\001\002\000\004\036\uffbc\001\002\000\004" +
    "\036\uffba\001\002\000\004\036\uffb8\001\002\000\004\036" +
    "\uffbb\001\002\000\004\011\030\001\002\000\016\012\ufffe" +
    "\014\ufffe\034\ufffe\035\ufffe\037\ufffe\040\ufffe\001\002\000" +
    "\016\012\ufff8\014\042\034\041\035\012\037\046\040\006" +
    "\001\002\000\004\036\234\001\002\000\020\004\uffcf\012" +
    "\uffcf\014\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\001\002" +
    "\000\022\004\uffd2\012\uffd2\013\232\014\uffd2\034\uffd2\035" +
    "\uffd2\037\uffd2\040\uffd2\001\002\000\016\012\ufff8\014\042" +
    "\034\041\035\012\037\046\040\006\001\002\000\020\004" +
    "\uffd0\012\uffd0\014\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0" +
    "\001\002\000\020\004\uffd1\012\uffd1\014\uffd1\034\uffd1\035" +
    "\uffd1\037\uffd1\040\uffd1\001\002\000\004\036\230\001\002" +
    "\000\012\034\015\035\012\037\020\040\006\001\002\000" +
    "\012\034\041\035\012\037\046\040\006\001\002\000\022" +
    "\004\uffd3\012\uffd3\013\222\014\uffd3\034\uffd3\035\uffd3\037" +
    "\uffd3\040\uffd3\001\002\000\004\012\ufffd\001\002\000\004" +
    "\036\047\001\002\000\004\035\023\001\002\000\022\004" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\034\uffcd\035\uffcd\037\uffcd" +
    "\040\uffcd\001\002\000\004\012\051\001\002\000\004\022" +
    "\052\001\002\000\046\004\060\026\057\027\072\031\075" +
    "\032\056\033\071\034\041\035\012\036\062\037\046\040" +
    "\006\041\073\042\065\043\067\044\066\045\070\046\077" +
    "\047\061\001\002\000\052\004\uffed\023\uffed\026\uffed\027" +
    "\uffed\030\215\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\001\002\000\004\004\214" +
    "\001\002\000\050\004\060\023\ufff6\026\057\027\072\031" +
    "\075\032\056\033\071\034\041\035\012\036\062\037\046" +
    "\040\006\041\073\042\065\043\067\044\066\045\070\046" +
    "\077\047\061\001\002\000\004\011\205\001\002\000\004" +
    "\011\176\001\002\000\050\004\ufff3\023\ufff3\026\ufff3\027" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\047\ufff3\001\002\000\024\011\111\021\103" +
    "\036\112\041\073\042\065\043\067\044\066\045\070\046" +
    "\077\001\002\000\010\011\114\013\164\024\163\001\002" +
    "\000\050\004\uffe9\023\uffe9\026\uffe9\027\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\001\002\000\004\004\162\001\002\000\034\004\uffe5" +
    "\005\uffe5\006\uffe5\012\uffe5\014\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\025\uffe5\034\uffe5\035\uffe5\037\uffe5\040\uffe5\001\002" +
    "\000\034\004\uffe4\005\uffe4\006\uffe4\012\uffe4\014\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\025\uffe4\034\uffe4\035\uffe4\037\uffe4" +
    "\040\uffe4\001\002\000\034\004\uffe2\005\uffe2\006\uffe2\012" +
    "\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\025\uffe2\034\uffe2" +
    "\035\uffe2\037\uffe2\040\uffe2\001\002\000\034\004\uffe3\005" +
    "\uffe3\006\uffe3\012\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\025\uffe3\034\uffe3\035\uffe3\037\uffe3\040\uffe3\001\002\000" +
    "\004\036\156\001\002\000\004\004\155\001\002\000\034" +
    "\004\uffe6\005\uffe6\006\uffe6\012\uffe6\014\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\025\uffe6\034\uffe6\035\uffe6\037\uffe6\040\uffe6" +
    "\001\002\000\004\004\154\001\002\000\004\011\102\001" +
    "\002\000\004\023\ufffc\001\002\000\034\004\uffe1\005\uffe1" +
    "\006\uffe1\012\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\025" +
    "\uffe1\034\uffe1\035\uffe1\037\uffe1\040\uffe1\001\002\000\004" +
    "\023\101\001\002\000\014\002\ufffb\034\ufffb\035\ufffb\037" +
    "\ufffb\040\ufffb\001\002\000\024\011\111\021\103\036\112" +
    "\041\073\042\065\043\067\044\066\045\070\046\077\001" +
    "\002\000\042\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\025" +
    "\uffb5\034\uffb5\035\uffb5\037\uffb5\040\uffb5\001\002\000\042" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\025\uffbe\034\uffbe" +
    "\035\uffbe\037\uffbe\040\uffbe\001\002\000\042\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\025\uffb6\034\uffb6\035\uffb6\037" +
    "\uffb6\040\uffb6\001\002\000\042\004\uffc2\005\uffc2\006\uffc2" +
    "\007\136\010\135\012\uffc2\014\uffc2\015\134\016\uffc2\017" +
    "\uffc2\020\uffc2\025\uffc2\034\uffc2\035\uffc2\037\uffc2\040\uffc2" +
    "\001\002\000\034\004\uffc8\005\uffc8\006\uffc8\012\uffc8\014" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\025\uffc8\034\uffc8\035\uffc8" +
    "\037\uffc8\040\uffc8\001\002\000\016\005\127\006\130\012" +
    "\150\016\125\017\126\020\132\001\002\000\024\011\111" +
    "\021\103\036\112\041\073\042\065\043\067\044\066\045" +
    "\070\046\077\001\002\000\046\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\114\012\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\024\113\025\uffb4\034\uffb4\035\uffb4" +
    "\037\uffb4\040\uffb4\001\002\000\024\011\111\021\103\036" +
    "\112\041\073\042\065\043\067\044\066\045\070\046\077" +
    "\001\002\000\010\012\uffdc\014\115\036\117\001\002\000" +
    "\004\036\122\001\002\000\004\012\121\001\002\000\010" +
    "\012\uffdc\014\115\036\117\001\002\000\004\012\uffde\001" +
    "\002\000\076\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\023" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\001\002" +
    "\000\010\012\uffdc\014\115\036\117\001\002\000\004\012" +
    "\uffdd\001\002\000\016\005\127\006\130\016\125\017\126" +
    "\020\132\025\131\001\002\000\010\011\111\021\103\036" +
    "\112\001\002\000\010\011\111\021\103\036\112\001\002" +
    "\000\010\011\111\021\103\036\112\001\002\000\010\011" +
    "\111\021\103\036\112\001\002\000\042\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\012\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\025\uffb3\034\uffb3\035\uffb3\037\uffb3" +
    "\040\uffb3\001\002\000\010\011\111\021\103\036\112\001" +
    "\002\000\042\004\uffc5\005\uffc5\006\uffc5\007\136\010\135" +
    "\012\uffc5\014\uffc5\015\134\016\uffc5\017\uffc5\020\uffc5\025" +
    "\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\001\002\000\010" +
    "\011\111\021\103\036\112\001\002\000\010\011\111\021" +
    "\103\036\112\001\002\000\010\011\111\021\103\036\112" +
    "\001\002\000\042\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\025\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1\001\002\000" +
    "\042\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\025\uffc0\034" +
    "\uffc0\035\uffc0\037\uffc0\040\uffc0\001\002\000\042\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\025\uffbf\034\uffbf\035\uffbf" +
    "\037\uffbf\040\uffbf\001\002\000\042\004\uffc3\005\uffc3\006" +
    "\uffc3\007\136\010\135\012\uffc3\014\uffc3\015\134\016\uffc3" +
    "\017\uffc3\020\uffc3\025\uffc3\034\uffc3\035\uffc3\037\uffc3\040" +
    "\uffc3\001\002\000\042\004\uffc4\005\uffc4\006\uffc4\007\136" +
    "\010\135\012\uffc4\014\uffc4\015\134\016\uffc4\017\uffc4\020" +
    "\uffc4\025\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\001\002" +
    "\000\042\004\uffc7\005\uffc7\006\uffc7\007\136\010\135\012" +
    "\uffc7\014\uffc7\015\134\016\uffc7\017\uffc7\020\uffc7\025\uffc7" +
    "\034\uffc7\035\uffc7\037\uffc7\040\uffc7\001\002\000\042\004" +
    "\uffc6\005\uffc6\006\uffc6\007\136\010\135\012\uffc6\014\uffc6" +
    "\015\134\016\uffc6\017\uffc6\020\uffc6\025\uffc6\034\uffc6\035" +
    "\uffc6\037\uffc6\040\uffc6\001\002\000\016\005\127\006\130" +
    "\012\147\016\125\017\126\020\132\001\002\000\042\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\025\uffb7\034\uffb7\035" +
    "\uffb7\037\uffb7\040\uffb7\001\002\000\004\022\151\001\002" +
    "\000\046\004\060\026\057\027\072\031\075\032\056\033" +
    "\071\034\041\035\012\036\062\037\046\040\006\041\073" +
    "\042\065\043\067\044\066\045\070\046\077\047\061\001" +
    "\002\000\004\023\153\001\002\000\050\004\uffec\023\uffec" +
    "\026\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\001\002\000\050\004" +
    "\uffe7\023\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\001\002" +
    "\000\050\004\ufff2\023\ufff2\026\ufff2\027\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\001\002\000\004\036\157\001\002\000\004\011\114" +
    "\001\002\000\004\004\161\001\002\000\050\004\uffea\023" +
    "\uffea\026\uffea\027\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\001\002\000\050" +
    "\004\ufff5\023\ufff5\026\ufff5\027\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\001" +
    "\002\000\024\011\111\021\103\036\112\041\073\042\065" +
    "\043\067\044\066\045\070\046\077\001\002\000\024\011" +
    "\111\021\103\036\112\041\073\042\065\043\067\044\066" +
    "\045\070\046\077\001\002\000\016\004\166\005\127\006" +
    "\130\016\125\017\126\020\132\001\002\000\050\004\ufff1" +
    "\023\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002\000" +
    "\016\005\127\006\130\016\125\017\126\020\132\025\170" +
    "\001\002\000\004\013\171\001\002\000\024\011\111\021" +
    "\103\036\112\041\073\042\065\043\067\044\066\045\070" +
    "\046\077\001\002\000\016\004\173\005\127\006\130\016" +
    "\125\017\126\020\132\001\002\000\050\004\ufff0\023\ufff0" +
    "\026\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002\000\016\004" +
    "\175\005\127\006\130\016\125\017\126\020\132\001\002" +
    "\000\050\004\ufff4\023\ufff4\026\ufff4\027\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\001\002\000\024\011\111\021\103\036\112\041\073" +
    "\042\065\043\067\044\066\045\070\046\077\001\002\000" +
    "\016\005\127\006\130\012\200\016\125\017\126\020\132" +
    "\001\002\000\004\022\201\001\002\000\046\004\uffe0\026" +
    "\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\001\002\000\046\004\060" +
    "\026\057\027\072\031\075\032\056\033\071\034\041\035" +
    "\012\036\062\037\046\040\006\041\073\042\065\043\067" +
    "\044\066\045\070\046\077\047\061\001\002\000\004\023" +
    "\204\001\002\000\052\004\uffdf\023\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\001\002\000\024\011\111\021" +
    "\103\036\112\041\073\042\065\043\067\044\066\045\070" +
    "\046\077\001\002\000\016\005\127\006\130\012\207\016" +
    "\125\017\126\020\132\001\002\000\004\022\210\001\002" +
    "\000\046\004\060\026\057\027\072\031\075\032\056\033" +
    "\071\034\041\035\012\036\062\037\046\040\006\041\073" +
    "\042\065\043\067\044\066\045\070\046\077\047\061\001" +
    "\002\000\004\023\212\001\002\000\050\004\uffeb\023\uffeb" +
    "\026\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\001\002\000\004\023" +
    "\ufff7\001\002\000\050\004\uffe8\023\uffe8\026\uffe8\027\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\001\002\000\004\022\uffef\001\002\000" +
    "\004\022\217\001\002\000\046\004\060\026\057\027\072" +
    "\031\075\032\056\033\071\034\041\035\012\036\062\037" +
    "\046\040\006\041\073\042\065\043\067\044\066\045\070" +
    "\046\077\047\061\001\002\000\004\023\221\001\002\000" +
    "\050\004\uffee\023\uffee\026\uffee\027\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\001\002\000\024\011\111\021\103\036\112\041\073\042" +
    "\065\043\067\044\066\045\070\046\077\001\002\000\032" +
    "\004\uffd4\005\127\006\130\012\uffd4\014\uffd4\016\125\017" +
    "\126\020\132\034\uffd4\035\uffd4\037\uffd4\040\uffd4\001\002" +
    "\000\016\012\ufff8\014\042\034\041\035\012\037\046\040" +
    "\006\001\002\000\004\012\ufff9\001\002\000\004\036\227" +
    "\001\002\000\022\004\uffcb\012\uffcb\013\uffcb\014\uffcb\034" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\001\002\000\022\004\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\034\uffcc\035\uffcc\037\uffcc\040" +
    "\uffcc\001\002\000\004\012\ufffa\001\002\000\024\011\111" +
    "\021\103\036\112\041\073\042\065\043\067\044\066\045" +
    "\070\046\077\001\002\000\032\004\uffce\005\127\006\130" +
    "\012\uffce\014\uffce\016\125\017\126\020\132\034\uffce\035" +
    "\uffce\037\uffce\040\uffce\001\002\000\022\004\uffca\012\uffca" +
    "\014\uffca\024\235\034\uffca\035\uffca\037\uffca\040\uffca\001" +
    "\002\000\024\011\111\021\103\036\112\041\073\042\065" +
    "\043\067\044\066\045\070\046\077\001\002\000\016\005" +
    "\127\006\130\016\125\017\126\020\132\025\237\001\002" +
    "\000\020\004\uffc9\012\uffc9\014\uffc9\034\uffc9\035\uffc9\037" +
    "\uffc9\040\uffc9\001\002\000\014\002\001\034\001\035\001" +
    "\037\001\040\001\001\002\000\004\002\000\001\002\000" +
    "\004\036\uffb9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\024\004\010\005\013\006\016\007\012\010" +
    "\003\011\004\012\015\013\007\023\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\241\006\016\007" +
    "\012\010\003\011\004\012\015\013\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\013\006\016\007" +
    "\012\010\003\011\004\012\015\013\007\023\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\025\006\016\007\012\010\003\011\004\012\015" +
    "\013\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\024\006\016\007\012\010\003" +
    "\011\004\012\015\013\007\001\001\000\020\005\023\006" +
    "\016\007\012\010\003\011\004\012\015\013\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\030\001\001" +
    "\000\026\002\034\006\044\007\037\011\031\016\043\032" +
    "\042\034\035\035\032\036\033\037\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\034\006\044\007\037\011\031\016\230\032\042\034\035" +
    "\035\032\036\033\037\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\225\006\016" +
    "\007\012\010\003\011\004\012\015\013\007\001\001\000" +
    "\024\002\223\006\044\007\037\011\031\032\042\034\035" +
    "\035\032\036\033\037\036\001\001\000\002\001\001\000" +
    "\004\042\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\002\053\006\044\007\037\011\031\015\062\017\073" +
    "\021\054\022\075\024\052\030\063\032\042\034\035\035" +
    "\032\036\033\037\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\053\006\044\007\037\011\031\015" +
    "\062\017\073\021\054\022\212\024\052\030\063\032\042" +
    "\034\035\035\032\036\033\037\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\104" +
    "\025\105\026\103\027\173\030\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\104\025\105\026\103\027\107\030\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\104\025\105\026\103\027\145\030\106\001\001\000\002" +
    "\001\001\000\014\015\104\025\105\026\103\027\123\030" +
    "\106\001\001\000\004\014\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\104\025\144\026" +
    "\103\001\001\000\010\015\104\025\143\026\103\001\001" +
    "\000\010\015\104\025\142\026\103\001\001\000\010\015" +
    "\104\025\141\026\103\001\001\000\002\001\001\000\010" +
    "\015\104\025\132\026\103\001\001\000\002\001\001\000" +
    "\006\015\104\026\140\001\001\000\006\015\104\026\137" +
    "\001\001\000\006\015\104\026\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\002\053\006\044\007\037\011\031\015\062\017\073\021" +
    "\054\022\151\024\052\030\063\032\042\034\035\035\032" +
    "\036\033\037\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\104\025\105\026\103" +
    "\027\166\030\106\001\001\000\014\015\104\025\105\026" +
    "\103\027\164\030\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\104\025\105\026\103\027\171\030\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\104\025\105\026\103\027\176\030\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\201\001\001\000\040\002\053\006\044\007\037\011\031" +
    "\015\062\017\073\021\054\022\202\024\052\030\063\032" +
    "\042\034\035\035\032\036\033\037\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\104\025\105\026" +
    "\103\027\205\030\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\053\006\044\007\037\011\031\015" +
    "\062\017\073\021\054\022\210\024\052\030\063\032\042" +
    "\034\035\035\032\036\033\037\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\215\001\001\000\002\001\001\000\040\002" +
    "\053\006\044\007\037\011\031\015\062\017\073\021\054" +
    "\022\217\024\052\030\063\032\042\034\035\035\032\036" +
    "\033\037\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\104\025\105\026\103\027\222\030\106\001" +
    "\001\000\002\001\001\000\026\002\034\006\044\007\037" +
    "\011\031\016\224\032\042\034\035\035\032\036\033\037" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\104\025\105\026\103\027\232\030\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\104\025\105\026" +
    "\103\027\235\030\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /** User initialization code. */
    VarFunctionsContext context = new VarFunctionsContext();
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
    }
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

   public static class Main {
     static public void main(String argv[]) throws Exception {
       /* Start the parser */
        Parser p = new Parser(new Lexer(new FileReader(argv[0])));
       try {
         p.context.robot = new Robot(argv[1]);
         System.out.println("Start parsing");
         System.out.println("---------------");
         p.context.robot.printMaze();
         Program result = (Program) p.parse().value;
         try {
            p.context.newScope();
            System.out.println(p.context.ex(p.context.rootFunc("main")));
         } catch (MyException e){
             if (e.getReturnVariable().funcCall != null && e.getReturnVariable().funcCall.equals("Return type does not match with function type")){
                 System.err.println("Return type does not match with function type");
             } else {
                 System.out.println(e.getReturnVariable());
             }
         }
         //p.context.getFunctions();
         //p.context.getVariables();
         System.out.println("Finish parsing");
        }catch (Exception e) {
          //do cleanup here -- possibly rethrow e
         System.out.println("");
         e.printStackTrace();
       }
       }
   }
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programm ::= programm function 
            {
              Program RESULT =null;
		 RESULT = new Program(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programm ::= function 
            {
              Program RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Opr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 context.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Opr RESULT =(Opr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fp = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 context.registerFunctionByName(n, fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Opr RESULT =(Opr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr fp = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr b = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 context.registerFunction(n, new FunctionDefinition(t, n, fp, b)); context.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= type NAME LPAREN NT$0 function_parametrs_declaration NT$1 RPAREN LBRACE function_body NT$2 RBRACE 
            {
              Opr RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Opr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Opr fp = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr b = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_parametrs_declaration ::= initialize function_parametrs_declaration 
            {
              Opr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr i = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fpd = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Opr res = new Opr(NodeType.OPR, operType.NEXTSTMT);
                res.addInListOpr(i);
                if (fpd != null)
                    res.addInListOpr(fpd);
                RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_parametrs_declaration ::= COMMA initialize function_parametrs_declaration 
            {
              Opr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr i = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fpd = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.NEXTSTMT);
                res.addInListOpr(i);
                if (fpd != null)
                    res.addInListOpr(fpd);
                RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_parametrs_declaration ::= 
            {
              Opr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_body ::= statement function_body 
            {
              Opr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr b = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Opr res = new Opr(NodeType.OPR, operType.NEXTSTMT);
                res.addInListOpr(s);
                res.addInListOpr(b);
                RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_body ::= statement 
            {
              Opr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR);
                res.addInListOpr(s);
                RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= robot SEMI 
            {
              Opr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr r = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= RETURN expr SEMI 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr n = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr res = new Opr(NodeType.OPR, operType.RETURN);
                res.addInListOpr(n);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= SEMI 
            {
              Opr RESULT =null;
		 Opr res = new Opr(NodeType.OPR, operType.SEMI);
                 RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= BREAK SEMI 
            {
              Opr RESULT =null;
		 RESULT = new Opr(NodeType.OPR, operType.BREAK); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= NAME ASSIGN expr SEMI 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                res.addInListOpr(e);
                RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= NAME LSQUARE expr RSQUARE ASSIGN expr SEMI 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr i = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                res.addInListOpr(i);
                res.addInListOpr(e);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Opr RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr wl = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 context.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= while_loop FINISH NT$3 LBRACE function_body RBRACE 
            {
              Opr RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Opr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Opr wl = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    Opr res = new Opr(NodeType.OPR, operType.WHILE_LOOP);
                                    res.addInListOpr(wl);
                                    res.addInListOpr(f);
                                    RESULT = res;
                                    context.deleteScope();
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= while_loop 
            {
              Opr RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr wl = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= ZERO LPAREN expr RPAREN LBRACE function_body RBRACE 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr res = new Opr(NodeType.OPR, operType.ZERO);
                res.addInListOpr(e);
                res.addInListOpr(s);
                RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= NOTZERO LPAREN expr RPAREN LBRACE function_body RBRACE 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr res = new Opr(NodeType.OPR, operType.NOTZERO);
                res.addInListOpr(e);
                res.addInListOpr(s);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= FOREACH NAME function_call SEMI 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr fc = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr res = new Opr(NodeType.OPR, operType.FOREACH);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                res.addInListOpr(fc);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= function_call 
            {
              Opr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fc = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= initialize SEMI 
            {
              Opr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr i = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= expr_list SEMI 
            {
              Opr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // robot ::= TOP 
            {
              Opr RESULT =null;
		 RESULT = new Opr(NodeType.OPR, operType.TOP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("robot",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // robot ::= BOTTOM 
            {
              Opr RESULT =null;
		 RESULT = new Opr(NodeType.OPR, operType.BOTTOM); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("robot",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // robot ::= RIGHT 
            {
              Opr RESULT =null;
		 RESULT = new Opr(NodeType.OPR, operType.RIGHT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("robot",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // robot ::= PORTAL 
            {
              Opr RESULT =null;
		 RESULT = new Opr(NodeType.OPR, operType.PORTAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("robot",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // robot ::= LEFT 
            {
              Opr RESULT =null;
		 RESULT = new Opr(NodeType.OPR, operType.LEFT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("robot",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // robot ::= TELEPORT 
            {
              Opr RESULT =null;
		 RESULT = new Opr(NodeType.OPR, operType.TELEPORT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("robot",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 context.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // while_loop ::= WHILE LPAREN expr RPAREN LBRACE NT$4 function_body RBRACE 
            {
              Opr RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Opr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr s = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  Opr res = new Opr(NodeType.OPR, operType.WHILE);
                  res.addInListOpr(e);
                  res.addInListOpr(s);
                  RESULT = res;
                  context.deleteScope();
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_loop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_parametrs ::= NAME function_parametrs 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fp = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                if (fp != null)
                    res.addInListOpr(fp);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_parametrs ::= COMMA NAME function_parametrs 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fp = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Variable var = context.getVar(n);
                RESULT = var;
                Opr res = new Opr(NodeType.OPR);
                res.addInListOpr(var);
                if (fp != null)
                    res.addInListOpr(fp);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_parametrs ::= 
            {
              Opr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parametrs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_call ::= NAME LPAREN function_parametrs RPAREN 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr p = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Opr funcParams = context.funcParametrs(n);
                Opr res = new Opr(NodeType.OPR, operType.FUNC_CALL);
                res.addInListOpr(new Opr(n));
                res.addInListOpr(funcParams);
                res.addInListOpr(p);
                RESULT = res;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= array_of 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= const_value 
            {
              Types RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types v = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= value 
            {
              Types RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types v = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= const_pointer 
            {
              Types RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types p = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= pointer 
            {
              Types RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types p = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= const_array_of 
            {
              Types RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // initialize ::= defenition_value ASSIGN expr 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr n = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                      res.addInListOpr(e);
                      res.addInListOpr(n);
                      RESULT = res;
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // initialize ::= defenition_value 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // initialize ::= defenition_pointer 
            {
              Opr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr p = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // initialize ::= defeniniton_const_pointer 
            {
              Opr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr p = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // initialize ::= defenition_array_of 
            {
              Opr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr a = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // initialize ::= defenition_const_array_of 
            {
              Opr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr a = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // initialize ::= defenition_pointer ASSIGN expr 
            {
              Opr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr p = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                      res.addInListOpr(p);
                      res.addInListOpr(e);
                      RESULT = res;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialize",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // defenition_value ::= value NAME 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     Variable var = new Variable(Types.VALUE, n);
                     context.addVar(var);
                     var.setValue(new Const(0));
                     RESULT = var;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_value",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // defenition_value ::= const_value NAME 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     Variable var = new Variable(Types.CONST_VALUE, n);
                      context.addVar(var);
                      RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_value",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // defenition_pointer ::= POINTER type NAME 
            {
              Opr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = new Variable(Types.POINTER, n);
                     context.addVar(var);
                     var.setValue(new Variable(t, n));
                     RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_pointer",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // defenition_array_of ::= array_of NAME 
            {
              Opr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	 Types type = Types.ARRAY_OF;
                    type.arrayType = t;
                    Variable var = new Variable(type, n);
                    var.setType(t);
                    context.addVar(var);
                    Opr res = new Opr(NodeType.VAR);
                    res.addInListOpr(var);
                    res.addInListOpr(new Const(4));
                    RESULT = res;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_array_of",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // defenition_array_of ::= array_of NAME LSQUARE expr RSQUARE 
            {
              Opr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Variable var = new Variable(Types.ARRAY_OF, n);
                    context.addVar(var);
                    Opr res = new Opr(NodeType.VAR);
                    res.addInListOpr(var);
                    res.addInListOpr(e);
                    RESULT = res;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defenition_array_of",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= robot 
            {
              Opr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr r = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr LTE factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.LTE);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr GTE factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.GTE);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr NE factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.NE);
                 res.addInListOpr(e);
                 res.addInListOpr(f);
                 RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr PLUS factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  Opr res = new Opr(NodeType.OPR, operType.PLUS);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr MINUS factor 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.MINUS);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= factor 
            {
              Opr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= factor TIMES term 
            {
              Opr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr t = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Opr res = new Opr(NodeType.OPR, operType.TIMES);
                  res.addInListOpr(f);
                  res.addInListOpr(t);
                  RESULT = res;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= factor DIVIDE term 
            {
              Opr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr t = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 Opr res = new Opr(NodeType.OPR, operType.DIVIDE);
                 res.addInListOpr(f);
                 res.addInListOpr(t);
                 RESULT = res;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= factor MOD term 
            {
              Opr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Opr f = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr t = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 Opr res = new Opr(NodeType.OPR, operType.MOD);
                 res.addInListOpr(f);
                 res.addInListOpr(t);
                 RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= term 
            {
              Opr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr t = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // value ::= VALUE 
            {
              Types RESULT =null;
		 RESULT = Types.VALUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // const_value ::= CONST VALUE 
            {
              Types RESULT =null;
		 RESULT = Types.CONST_VALUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_value",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // pointer ::= POINTER type 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Types.POINTER; RESULT.setType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // const_pointer ::= CONST POINTER type 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Types.CONST_POINTER; RESULT.setType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_pointer",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // array_of ::= ARRAY_OF type 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (t.equals(Types.ARRAY_OF) && t.type.equals(Types.VALUE)) {
                        t.arrayType = Types.ARRAY_OF;
                        RESULT = t;
                    } else {
                    RESULT = Types.ARRAY_OF;
                    RESULT.setType(t);
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_of",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // const_array_of ::= CONST ARRAY_OF type 
            {
              Types RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_array_of",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // term ::= LPAREN expr RPAREN 
            {
              Opr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term ::= function_call 
            {
              Opr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opr fc = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // term ::= NUMBER 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Opr) new Const(n);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term ::= NAME 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable var = context.getVar(n);
                 RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term ::= NAME LSQUARE expr RSQUARE 
            {
              Opr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Opr e = (Opr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Variable var = context.getVar(n);
                 Opr res = new Opr(NodeType.OPR, operType.TAKE_FROM_ARRAY);
                 res.addInListOpr(var);
                 res.addInListOpr(e);
                 RESULT = res;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
