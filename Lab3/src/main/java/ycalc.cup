/*
  This example comes from a short article series in the Linux 
  Gazette by Richard A. Sevenich and Christopher Lopes, titled
  "Compiler Construction Tools". The article series starts at

  http://www.linuxgazette.com/issue39/sevenich.html

  Small changes and updates to newest JFlex+Cup versions 
  by Gerwin Klein
*/

/*
  Commented By: Christopher Lopes
  File Name: ycalc.cup
  To Create: > java java_cup.Main < ycalc.cup
*/
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import javafx.util.Pair;
import java.util.HashSet;
import java.util.Set;
import java.util.Objects;
import java.util.LinkedList;
import java.io.*;
import java.util.Arrays;
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    /** User initialization code. */
    VarFunctionsContext context = new VarFunctionsContext();
    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
        typenames.peek().add(name);
    }
    Set<Pair<String, Integer>> varArray = new HashSet();
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
    }
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

   public static class Main {
     static public void main(String argv[]) {
       /* Start the parser */
       try {
         Parser p = new Parser(new Lexer(new FileReader(argv[0])));
         System.out.println("Start parsing");
         p.context.newScope();
         Program result = (Program) p.parse().value;
         p.context.deleteScope();
         p.context.getFunctions();
         p.context.getVariables();
         System.out.println(p.context.ex(p.context.rootFunc("main")));
         System.out.println("Finish parsing");
       } catch (Exception e) {
         /* do cleanup here -- possibly rethrow e */
         System.out.println("");
         e.printStackTrace();
       }
     }
   }
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */

terminal SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, ASSIGN, COMMA; // arythmetical terminals
terminal Integer NUMBER; // int terminals
terminal String LBRACE, RBRACE; // other string terminals
terminal String POINTER, VALUE, NAME, CONST, ARRAY_OF; // type terminals

non terminal Opr initialize, initialize_part;
non terminal Program    programm;
non terminal Types      type, value, const_value;
non terminal Types      pointer, array_of, const_pointer, const_array_of;
non terminal Opr   function_parametrs;
non terminal Opr   expr_list;
non terminal Opr       statement_list, statement;
non terminal Opr   function_body;
non terminal Opr     function;
non terminal Opr       factor, term;
non terminal Opr       expr;
non terminal String     programm_name; // other string non terminals
non terminal Opr defenition_value, defenition_const_value, defenition_array_of, defenition_const_array_of, defenition_pointer, defeniniton_const_pointer; // defenition
non terminal boolean    const;
terminal     Opr        RETURN;
/* -------------Precedence and Associatively of Terminals Section----------- */

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;


   programm ::= programm function  {: RESULT = new Program(); :}
                | function
                ;
   function ::= type:t NAME:n  LPAREN function_parametrs:p RPAREN LBRACE function_body:b RBRACE // объявление функции
                {: context.registerFunction(new FunctionDefinition(t, n, p, b)); :}
                ;
   function_body ::= // тело функции
                statement:s function_body:b {:
                Opr res = new Opr(NodeType.OPR, operType.NEXTSTMT);
                res.addInListOpr(s);
                res.addInListOpr(b);
                RESULT = res; :}
                | statement:s {: Opr res = new Opr(NodeType.OPR);
                res.addInListOpr(s);
                RESULT = res; :}
                ;
   statement    ::=
                RETURN NUMBER:n SEMI {: Opr res = new Const(n);
                   RESULT = res; :}
                | RETURN NAME:n SEMI {:
                Opr res = new Opr(NodeType.OPR, operType.RETURN);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                RESULT = res;
                :}
                | SEMI {: Opr res = new Opr(NodeType.OPR, operType.SEMI);
                 res.addInListOpr(null);
                 RESULT = res;
                 :}
                | NAME:n ASSIGN expr:e SEMI {: Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                Variable var = context.getVar(n);
                res.addInListOpr(var);
                res.addInListOpr(e);
                RESULT = res;
                //res.addInListOpr(e);
                //res.addInListOpr(/* existt variable */);
                 :}
                | initialize:i {: RESULT = i; :}
                | expr_list SEMI
                ;
   function_parametrs ::=
                type:t NAME:n {:  :} function_parametrs // один или несколько параметров
                | COMMA type:t NAME:n {:  :} function_parametrs // через запятую сделать параметры через запятую
                |
                ;
   type ::=     const_value:v {: :} // целочисленный тип
                |
                value:v {:  :}
                |
                const_pointer:p  // указатель
                |
                pointer:p {:  :}
                |
                const_array_of:a // массив
                |
                array_of type:t
                ;
   initialize ::= defenition_value:e ASSIGN expr:n SEMI
                     {: Opr res = new Opr(NodeType.OPR, operType.ASSIGN);
                     /*if (e instanceof Variable){
                         ((Variable)e).setValue(n);
                     }*/
                      res.addInListOpr(e);
                      res.addInListOpr(n);
                      RESULT = res;
                      :}
                     | defenition_value:e SEMI {: RESULT = e; :}
                     | defenition_pointer:p
                     | defeniniton_const_pointer:p
                     | defenition_array_of:a
                     | defenition_const_array_of:a
                     ;
   defenition_value ::= VALUE NAME:n
                     {:
                     Variable var = new Variable(Types.VALUE, n);
                     context.addVar(var);
                     var.setValue(new Const(0));
                     RESULT = var;
                     :}
                     ;
   defenition_pointer ::= POINTER:p type:t NAME:w
                    {: System.out.print("pointer " + t.toString() + " " + w);
                    :}
                    ;
   defenition_array_of ::= ARRAY_OF type:t NAME:w
                    {: System.out.print("array of " + t.toString() + " " + w);
                    :}
                    ;
   expr      ::=  expr:e PLUS factor:f
                 {:
                  Opr res = new Opr(NodeType.OPR, operType.PLUS);
                  /*if (e instanceof Variable){
                    e = ((Variable)e).getValue();
                  }*/
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res;:}
                 | expr:e MINUS factor:f
                 {: Opr res = new Opr(NodeType.OPR, operType.MINUS);
                  res.addInListOpr(e);
                  res.addInListOpr(f);
                  RESULT = res; :}
                 | factor:f
                 {: RESULT = f; :}
                 ;
   factor    ::= factor:f TIMES term:t
                 {: Opr res = new Opr(NodeType.OPR, operType.TIMES);
                  res.addInListOpr(f);
                  res.addInListOpr(t);
                  RESULT = res;
                  :}
                 |
                 factor:f DIVIDE term:t
                 {:
                 Opr res = new Opr(NodeType.OPR, operType.DIVIDE);
                 res.addInListOpr(f);
                 res.addInListOpr(t);
                 RESULT = res;
                  :}
                 |
                 term:t
                 {: RESULT = t; :}
                 ;
   value ::= VALUE {: RESULT = Types.VALUE; :};
   const_value ::= CONST VALUE {: RESULT = Types.CONST_VALUE; :};
   pointer ::= POINTER type:t {: RESULT = Types.POINTER; RESULT.setType(t); :};
   const_pointer ::= CONST POINTER type;
   array_of ::= ARRAY_OF type;
   const_array_of ::= CONST ARRAY_OF type;
   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = (Opr) new Const(n);
                 :}
                 |
                 NAME:n {: Variable var = context.getVar(n);
                 RESULT = var; :}
                 ;

